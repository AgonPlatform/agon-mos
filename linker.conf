/*
    See a thorouhly commented linker file here:
    https://github.com/wntrblm/Castor_and_Pollux/blob/main/firmware/scripts/samd21g18a.ld
*/

ROM_START = 0x000000;
ROM_SIZE  = 0x020000;
RAM_START = 0x0bc000;
RAM_SIZE  = 0x004000; /* 16KiB MOS ram */

ENTRY(_reset)

MEMORY {
    ROM (rw) : ORIGIN = ROM_START, LENGTH = ROM_SIZE
    RAM (rw) : ORIGIN = RAM_START, LENGTH = RAM_SIZE
}

SECTIONS
{
    . = ROM_START;

    .init : { *(.init .init.args .init.bss .fini) } > ROM

    .text : { *(.text) } > ROM

    .init_array : { *(.init_array) } > ROM

    .ctors : { *(.ctors) } > ROM

    .dtors : { *(.dtors) } > ROM

    .fini_array : { *(.fini_array) } > ROM

    .rodata : {
        *(.rodata)
        rodata_end = .;
    } > ROM

    .data : AT ( ADDR (.rodata) + SIZEOF(.rodata) )
    {
        data_start = .;
        *(.data)
        data_end = .;
    } > RAM

    .bss :
    {
        bss_start = .;
        *(.bss .bss*)
        bss_end = .;
    } > RAM
}

__stack              = RAM_START + RAM_SIZE;
___rodata_end        = rodata_end;
___data_start        = data_start;
___data_len          = SIZEOF(.data);
___bss_start          = bss_start;
___bss_len           = SIZEOF(.bss);
___heapbot           = bss_end;
___heaptop           = RAM_START + RAM_SIZE;
___run_clearbss      = ___bss_len > 0;

/* symbols for initializing the init_array and ctors sections */
___init_array_count     = SIZEOF(.init_array) / 3;
___ctors_count          = SIZEOF(.ctors) / 3;
___dtors_count          = SIZEOF(.dtors) / 3;
___fini_array_count     = SIZEOF(.fini_array) / 3;
___init_count           = ___init_array_count + ___ctors_count;
___fini_count           = ___dtors_count + ___fini_array_count;
___run_init             = ___init_count > 0;
___run_fini             = ___fini_count > 0;
___init_count_a         = (((___init_count -1) >> 16) & 0xFF) + 1;
___init_count_b         = (((___init_count -1)      ) & 0xFF) + 1;
___init_count_c         = (((___init_count -1) >>  8) & 0xFF) + 1;
___fini_count_a         = (((___fini_count -1) >> 16) & 0xFF) + 1;
___fini_count_b         = (((___fini_count -1)      ) & 0xFF) + 1;
___fini_count_c         = (((___fini_count -1) >>  8) & 0xFF) + 1;
___init_array_functions = SIZEOF(.init_array) + ADDR(.init_array);
___init_ctors_functions = SIZEOF(.ctors) + ADDR(.ctors);
___fini_dtors_functions = SIZEOF(.dtors) + ADDR(.dtors);
___fini_array_functions = SIZEOF(.fini_array) + ADDR(.fini_array);
